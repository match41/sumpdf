/***************************************************************************\
 *   Copyright (C) 2006 by Nestal Wan                                      *
 *   me@nestal.net                                                         *
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; version 2.                              *
 *                                                                         *
 *   This program is distributed in the hope that it will be useful,       *
 *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *
 *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *
 *   GNU General Public License for more details.                          *
 *                                                                         *
 *   You should have received a copy of the GNU General Public License     *
 *   along with this program; if not, write to the                         *
 *   Free Software Foundation, Inc.,                                       *
 *   59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.             *
\***************************************************************************/

/**	\file	CodeMap.cc
    \brief	definition the CodeMap class
    \date	Mar 21, 2010
    \author	Nestal Wan
*/

#include "CodeMap.hh"

#include "util/Util.hh"

#include <boost/bimap.hpp>
#include <boost/bimap/set_of.hpp>

#include <cstring>

namespace pdf {

namespace
{
	struct StrComp
	{
		bool operator()( const char *s1, const char *s2 ) const
		{
			return std::strcmp( s1, s2 ) > 0 ;
		}
	} ;

	typedef	boost::bimap<
		boost::bimaps::set_of<wchar_t>,
		boost::bimaps::set_of<const char*, StrComp>
	> UnicodeMap ; 
	
	const UnicodeMap::value_type table[] =
	{
		UnicodeMap::value_type( 0x0021, "!" ),
		UnicodeMap::value_type( 0x0023, "#" ),
		UnicodeMap::value_type( 0x0024, "$" ),
		UnicodeMap::value_type( 0x0025, "%" ),
		UnicodeMap::value_type( 0x0026, "&" ),
		UnicodeMap::value_type( 0x0027, "'" ),
		UnicodeMap::value_type( 0x0028, "(" ),
		UnicodeMap::value_type( 0x0029, ")" ),
		UnicodeMap::value_type( 0x002a, "*" ),
		UnicodeMap::value_type( 0x002b, "+" ),
		UnicodeMap::value_type( 0x002c, "," ),
		UnicodeMap::value_type( 0x002d, "-" ),
		UnicodeMap::value_type( 0x002e, "." ),
		UnicodeMap::value_type( 0x002f, "/" ),
		UnicodeMap::value_type( 0x0030, "0" ),
		UnicodeMap::value_type( 0x0031, "1" ),
		UnicodeMap::value_type( 0x0032, "2" ),
		UnicodeMap::value_type( 0x0033, "3" ),
		UnicodeMap::value_type( 0x0034, "4" ),
		UnicodeMap::value_type( 0x0035, "5" ),
		UnicodeMap::value_type( 0x0036, "6" ),
		UnicodeMap::value_type( 0x0037, "7" ),
		UnicodeMap::value_type( 0x0038, "8" ),
		UnicodeMap::value_type( 0x0039, "9" ),
		UnicodeMap::value_type( 0x003a, ":" ),
		UnicodeMap::value_type( 0x003b, ";" ),
		UnicodeMap::value_type( 0x003c, "<" ),
		UnicodeMap::value_type( 0x003d, "=" ),
		UnicodeMap::value_type( 0x003e, ">" ),
		UnicodeMap::value_type( 0x003f, "?" ),
		UnicodeMap::value_type( 0x0040, "@" ),
		UnicodeMap::value_type( 0x0041, "A" ),
		UnicodeMap::value_type( 0x00c6, "AE" ),
		UnicodeMap::value_type( 0x01fc, "AEacute" ),
		UnicodeMap::value_type( 0xf7e6, "AEsmall" ),
		UnicodeMap::value_type( 0x00c1, "Aacute" ),
		UnicodeMap::value_type( 0xf7e1, "Aacutesmall" ),
		UnicodeMap::value_type( 0x0102, "Abreve" ),
		UnicodeMap::value_type( 0x00c2, "Acircumflex" ),
		UnicodeMap::value_type( 0xf7e2, "Acircumflexsmall" ),
		UnicodeMap::value_type( 0xf6c9, "Acute" ),
		UnicodeMap::value_type( 0xf7b4, "Acutesmall" ),
		UnicodeMap::value_type( 0x00c4, "Adieresis" ),
		UnicodeMap::value_type( 0xf7e4, "Adieresissmall" ),
		UnicodeMap::value_type( 0x00c0, "Agrave" ),
		UnicodeMap::value_type( 0xf7e0, "Agravesmall" ),
		UnicodeMap::value_type( 0x0391, "Alpha" ),
		UnicodeMap::value_type( 0x0386, "Alphatonos" ),
		UnicodeMap::value_type( 0x0100, "Amacron" ),
		UnicodeMap::value_type( 0x0104, "Aogonek" ),
		UnicodeMap::value_type( 0x00c5, "Aring" ),
		UnicodeMap::value_type( 0x01fa, "Aringacute" ),
		UnicodeMap::value_type( 0xf7e5, "Aringsmall" ),
		UnicodeMap::value_type( 0xf761, "Asmall" ),
		UnicodeMap::value_type( 0x00c3, "Atilde" ),
		UnicodeMap::value_type( 0xf7e3, "Atildesmall" ),
		UnicodeMap::value_type( 0x0042, "B" ),
		UnicodeMap::value_type( 0x0392, "Beta" ),
		UnicodeMap::value_type( 0xf6f4, "Brevesmall" ),
		UnicodeMap::value_type( 0xf762, "Bsmall" ),
		UnicodeMap::value_type( 0x0043, "C" ),
		UnicodeMap::value_type( 0x0106, "Cacute" ),
		UnicodeMap::value_type( 0xf6ca, "Caron" ),
		UnicodeMap::value_type( 0xf6f5, "Caronsmall" ),
		UnicodeMap::value_type( 0x010c, "Ccaron" ),
		UnicodeMap::value_type( 0x00c7, "Ccedilla" ),
		UnicodeMap::value_type( 0xf7e7, "Ccedillasmall" ),
		UnicodeMap::value_type( 0x0108, "Ccircumflex" ),
		UnicodeMap::value_type( 0x010a, "Cdotaccent" ),
		UnicodeMap::value_type( 0xf7b8, "Cedillasmall" ),
		UnicodeMap::value_type( 0x03a7, "Chi" ),
		UnicodeMap::value_type( 0xf6f6, "Circumflexsmall" ),
		UnicodeMap::value_type( 0xf763, "Csmall" ),
		UnicodeMap::value_type( 0x0044, "D" ),
		UnicodeMap::value_type( 0x010e, "Dcaron" ),
		UnicodeMap::value_type( 0x0110, "Dcroat" ),
		UnicodeMap::value_type( 0x2206, "Delta" ),
		UnicodeMap::value_type( 0xf6cb, "Dieresis" ),
		UnicodeMap::value_type( 0xf6cc, "DieresisAcute" ),
		UnicodeMap::value_type( 0xf6cd, "DieresisGrave" ),
		UnicodeMap::value_type( 0xf7a8, "Dieresissmall" ),
		UnicodeMap::value_type( 0xf6f7, "Dotaccentsmall" ),
		UnicodeMap::value_type( 0xf764, "Dsmall" ),
		UnicodeMap::value_type( 0x0045, "E" ),
		UnicodeMap::value_type( 0x00c9, "Eacute" ),
		UnicodeMap::value_type( 0xf7e9, "Eacutesmall" ),
		UnicodeMap::value_type( 0x0114, "Ebreve" ),
		UnicodeMap::value_type( 0x011a, "Ecaron" ),
		UnicodeMap::value_type( 0x00ca, "Ecircumflex" ),
		UnicodeMap::value_type( 0xf7ea, "Ecircumflexsmall" ),
		UnicodeMap::value_type( 0x00cb, "Edieresis" ),
		UnicodeMap::value_type( 0xf7eb, "Edieresissmall" ),
		UnicodeMap::value_type( 0x0116, "Edotaccent" ),
		UnicodeMap::value_type( 0x00c8, "Egrave" ),
		UnicodeMap::value_type( 0xf7e8, "Egravesmall" ),
		UnicodeMap::value_type( 0x0112, "Emacron" ),
		UnicodeMap::value_type( 0x014a, "Eng" ),
		UnicodeMap::value_type( 0x0118, "Eogonek" ),
		UnicodeMap::value_type( 0x0395, "Epsilon" ),
		UnicodeMap::value_type( 0x0388, "Epsilontonos" ),
		UnicodeMap::value_type( 0xf765, "Esmall" ),
		UnicodeMap::value_type( 0x0397, "Eta" ),
		UnicodeMap::value_type( 0x0389, "Etatonos" ),
		UnicodeMap::value_type( 0x00d0, "Eth" ),
		UnicodeMap::value_type( 0xf7f0, "Ethsmall" ),
		UnicodeMap::value_type( 0x20ac, "Euro" ),
		UnicodeMap::value_type( 0x0046, "F" ),
		UnicodeMap::value_type( 0xf766, "Fsmall" ),
		UnicodeMap::value_type( 0x0047, "G" ),
		UnicodeMap::value_type( 0x0393, "Gamma" ),
		UnicodeMap::value_type( 0x011e, "Gbreve" ),
		UnicodeMap::value_type( 0x01e6, "Gcaron" ),
		UnicodeMap::value_type( 0x011c, "Gcircumflex" ),
		UnicodeMap::value_type( 0x0122, "Gcommaaccent" ),
		UnicodeMap::value_type( 0x0120, "Gdotaccent" ),
		UnicodeMap::value_type( 0xf6ce, "Grave" ),
		UnicodeMap::value_type( 0xf760, "Gravesmall" ),
		UnicodeMap::value_type( 0xf767, "Gsmall" ),
		UnicodeMap::value_type( 0x0048, "H" ),
		UnicodeMap::value_type( 0x25cf, "H18533" ),
		UnicodeMap::value_type( 0x25aa, "H18543" ),
		UnicodeMap::value_type( 0x25ab, "H18551" ),
		UnicodeMap::value_type( 0x25a1, "H22073" ),
		UnicodeMap::value_type( 0x0126, "Hbar" ),
		UnicodeMap::value_type( 0x0124, "Hcircumflex" ),
		UnicodeMap::value_type( 0xf768, "Hsmall" ),
		UnicodeMap::value_type( 0xf6cf, "Hungarumlaut" ),
		UnicodeMap::value_type( 0xf6f8, "Hungarumlautsmall" ),
		UnicodeMap::value_type( 0x0049, "I" ),
		UnicodeMap::value_type( 0x0132, "IJ" ),
		UnicodeMap::value_type( 0x00cd, "Iacute" ),
		UnicodeMap::value_type( 0xf7ed, "Iacutesmall" ),
		UnicodeMap::value_type( 0x012c, "Ibreve" ),
		UnicodeMap::value_type( 0x00ce, "Icircumflex" ),
		UnicodeMap::value_type( 0xf7ee, "Icircumflexsmall" ),
		UnicodeMap::value_type( 0x00cf, "Idieresis" ),
		UnicodeMap::value_type( 0xf7ef, "Idieresissmall" ),
		UnicodeMap::value_type( 0x0130, "Idotaccent" ),
		UnicodeMap::value_type( 0x2111, "Ifraktur" ),
		UnicodeMap::value_type( 0x00cc, "Igrave" ),
		UnicodeMap::value_type( 0xf7ec, "Igravesmall" ),
		UnicodeMap::value_type( 0x012a, "Imacron" ),
		UnicodeMap::value_type( 0x012e, "Iogonek" ),
		UnicodeMap::value_type( 0x0399, "Iota" ),
		UnicodeMap::value_type( 0x03aa, "Iotadieresis" ),
		UnicodeMap::value_type( 0x038a, "Iotatonos" ),
		UnicodeMap::value_type( 0xf769, "Ismall" ),
		UnicodeMap::value_type( 0x0128, "Itilde" ),
		UnicodeMap::value_type( 0x004a, "J" ),
		UnicodeMap::value_type( 0x0134, "Jcircumflex" ),
		UnicodeMap::value_type( 0xf76a, "Jsmall" ),
		UnicodeMap::value_type( 0x004b, "K" ),
		UnicodeMap::value_type( 0x039a, "Kappa" ),
		UnicodeMap::value_type( 0x0136, "Kcommaaccent" ),
		UnicodeMap::value_type( 0xf76b, "Ksmall" ),
		UnicodeMap::value_type( 0x004c, "L" ),
		UnicodeMap::value_type( 0xf6bf, "LL" ),
		UnicodeMap::value_type( 0x0139, "Lacute" ),
		UnicodeMap::value_type( 0x039b, "Lambda" ),
		UnicodeMap::value_type( 0x013d, "Lcaron" ),
		UnicodeMap::value_type( 0x013b, "Lcommaaccent" ),
		UnicodeMap::value_type( 0x013f, "Ldot" ),
		UnicodeMap::value_type( 0x0141, "Lslash" ),
		UnicodeMap::value_type( 0xf6f9, "Lslashsmall" ),
		UnicodeMap::value_type( 0xf76c, "Lsmall" ),
		UnicodeMap::value_type( 0x004d, "M" ),
		UnicodeMap::value_type( 0xf6d0, "Macron" ),
		UnicodeMap::value_type( 0xf7af, "Macronsmall" ),
		UnicodeMap::value_type( 0xf76d, "Msmall" ),
		UnicodeMap::value_type( 0x039c, "Mu" ),
		UnicodeMap::value_type( 0x004e, "N" ),
		UnicodeMap::value_type( 0x0143, "Nacute" ),
		UnicodeMap::value_type( 0x0147, "Ncaron" ),
		UnicodeMap::value_type( 0x0145, "Ncommaaccent" ),
		UnicodeMap::value_type( 0xf76e, "Nsmall" ),
		UnicodeMap::value_type( 0x00d1, "Ntilde" ),
		UnicodeMap::value_type( 0xf7f1, "Ntildesmall" ),
		UnicodeMap::value_type( 0x039d, "Nu" ),
		UnicodeMap::value_type( 0x004f, "O" ),
		UnicodeMap::value_type( 0x0152, "OE" ),
		UnicodeMap::value_type( 0xf6fa, "OEsmall" ),
		UnicodeMap::value_type( 0x00d3, "Oacute" ),
		UnicodeMap::value_type( 0xf7f3, "Oacutesmall" ),
		UnicodeMap::value_type( 0x014e, "Obreve" ),
		UnicodeMap::value_type( 0x00d4, "Ocircumflex" ),
		UnicodeMap::value_type( 0xf7f4, "Ocircumflexsmall" ),
		UnicodeMap::value_type( 0x00d6, "Odieresis" ),
		UnicodeMap::value_type( 0xf7f6, "Odieresissmall" ),
		UnicodeMap::value_type( 0xf6fb, "Ogoneksmall" ),
		UnicodeMap::value_type( 0x00d2, "Ograve" ),
		UnicodeMap::value_type( 0xf7f2, "Ogravesmall" ),
		UnicodeMap::value_type( 0x01a0, "Ohorn" ),
		UnicodeMap::value_type( 0x0150, "Ohungarumlaut" ),
		UnicodeMap::value_type( 0x014c, "Omacron" ),
		UnicodeMap::value_type( 0x2126, "Omega" ),
		UnicodeMap::value_type( 0x038f, "Omegatonos" ),
		UnicodeMap::value_type( 0x039f, "Omicron" ),
		UnicodeMap::value_type( 0x038c, "Omicrontonos" ),
		UnicodeMap::value_type( 0x00d8, "Oslash" ),
		UnicodeMap::value_type( 0x01fe, "Oslashacute" ),
		UnicodeMap::value_type( 0xf7f8, "Oslashsmall" ),
		UnicodeMap::value_type( 0xf76f, "Osmall" ),
		UnicodeMap::value_type( 0x00d5, "Otilde" ),
		UnicodeMap::value_type( 0xf7f5, "Otildesmall" ),
		UnicodeMap::value_type( 0x0050, "P" ),
		UnicodeMap::value_type( 0x03a6, "Phi" ),
		UnicodeMap::value_type( 0x03a0, "Pi" ),
		UnicodeMap::value_type( 0x03a8, "Psi" ),
		UnicodeMap::value_type( 0xf770, "Psmall" ),
		UnicodeMap::value_type( 0x0051, "Q" ),
		UnicodeMap::value_type( 0xf771, "Qsmall" ),
		UnicodeMap::value_type( 0x0052, "R" ),
		UnicodeMap::value_type( 0x0154, "Racute" ),
		UnicodeMap::value_type( 0x0158, "Rcaron" ),
		UnicodeMap::value_type( 0x0156, "Rcommaaccent" ),
		UnicodeMap::value_type( 0x211c, "Rfraktur" ),
		UnicodeMap::value_type( 0x03a1, "Rho" ),
		UnicodeMap::value_type( 0xf6fc, "Ringsmall" ),
		UnicodeMap::value_type( 0xf772, "Rsmall" ),
		UnicodeMap::value_type( 0x0053, "S" ),
		UnicodeMap::value_type( 0x250c, "SF010000" ),
		UnicodeMap::value_type( 0x2514, "SF020000" ),
		UnicodeMap::value_type( 0x2510, "SF030000" ),
		UnicodeMap::value_type( 0x2518, "SF040000" ),
		UnicodeMap::value_type( 0x253c, "SF050000" ),
		UnicodeMap::value_type( 0x252c, "SF060000" ),
		UnicodeMap::value_type( 0x2534, "SF070000" ),
		UnicodeMap::value_type( 0x251c, "SF080000" ),
		UnicodeMap::value_type( 0x2524, "SF090000" ),
		UnicodeMap::value_type( 0x2500, "SF100000" ),
		UnicodeMap::value_type( 0x2502, "SF110000" ),
		UnicodeMap::value_type( 0x2561, "SF190000" ),
		UnicodeMap::value_type( 0x2562, "SF200000" ),
		UnicodeMap::value_type( 0x2556, "SF210000" ),
		UnicodeMap::value_type( 0x2555, "SF220000" ),
		UnicodeMap::value_type( 0x2563, "SF230000" ),
		UnicodeMap::value_type( 0x2551, "SF240000" ),
		UnicodeMap::value_type( 0x2557, "SF250000" ),
		UnicodeMap::value_type( 0x255d, "SF260000" ),
		UnicodeMap::value_type( 0x255c, "SF270000" ),
		UnicodeMap::value_type( 0x255b, "SF280000" ),
		UnicodeMap::value_type( 0x255e, "SF360000" ),
		UnicodeMap::value_type( 0x255f, "SF370000" ),
		UnicodeMap::value_type( 0x255a, "SF380000" ),
		UnicodeMap::value_type( 0x2554, "SF390000" ),
		UnicodeMap::value_type( 0x2569, "SF400000" ),
		UnicodeMap::value_type( 0x2566, "SF410000" ),
		UnicodeMap::value_type( 0x2560, "SF420000" ),
		UnicodeMap::value_type( 0x2550, "SF430000" ),
		UnicodeMap::value_type( 0x256c, "SF440000" ),
		UnicodeMap::value_type( 0x2567, "SF450000" ),
		UnicodeMap::value_type( 0x2568, "SF460000" ),
		UnicodeMap::value_type( 0x2564, "SF470000" ),
		UnicodeMap::value_type( 0x2565, "SF480000" ),
		UnicodeMap::value_type( 0x2559, "SF490000" ),
		UnicodeMap::value_type( 0x2558, "SF500000" ),
		UnicodeMap::value_type( 0x2552, "SF510000" ),
		UnicodeMap::value_type( 0x2553, "SF520000" ),
		UnicodeMap::value_type( 0x256b, "SF530000" ),
		UnicodeMap::value_type( 0x256a, "SF540000" ),
		UnicodeMap::value_type( 0x015a, "Sacute" ),
		UnicodeMap::value_type( 0x0160, "Scaron" ),
		UnicodeMap::value_type( 0xf6fd, "Scaronsmall" ),
		UnicodeMap::value_type( 0x015e, "Scedilla" ),
		UnicodeMap::value_type( 0x015c, "Scircumflex" ),
		UnicodeMap::value_type( 0x0218, "Scommaaccent" ),
		UnicodeMap::value_type( 0x03a3, "Sigma" ),
		UnicodeMap::value_type( 0xf773, "Ssmall" ),
		UnicodeMap::value_type( 0x0054, "T" ),
		UnicodeMap::value_type( 0x03a4, "Tau" ),
		UnicodeMap::value_type( 0x0166, "Tbar" ),
		UnicodeMap::value_type( 0x0164, "Tcaron" ),
		UnicodeMap::value_type( 0x0162, "Tcommaaccent" ),
		UnicodeMap::value_type( 0x0398, "Theta" ),
		UnicodeMap::value_type( 0x00de, "Thorn" ),
		UnicodeMap::value_type( 0xf7fe, "Thornsmall" ),
		UnicodeMap::value_type( 0xf6fe, "Tildesmall" ),
		UnicodeMap::value_type( 0xf774, "Tsmall" ),
		UnicodeMap::value_type( 0x0055, "U" ),
		UnicodeMap::value_type( 0x00da, "Uacute" ),
		UnicodeMap::value_type( 0xf7fa, "Uacutesmall" ),
		UnicodeMap::value_type( 0x016c, "Ubreve" ),
		UnicodeMap::value_type( 0x00db, "Ucircumflex" ),
		UnicodeMap::value_type( 0xf7fb, "Ucircumflexsmall" ),
		UnicodeMap::value_type( 0x00dc, "Udieresis" ),
		UnicodeMap::value_type( 0xf7fc, "Udieresissmall" ),
		UnicodeMap::value_type( 0x00d9, "Ugrave" ),
		UnicodeMap::value_type( 0xf7f9, "Ugravesmall" ),
		UnicodeMap::value_type( 0x01af, "Uhorn" ),
		UnicodeMap::value_type( 0x0170, "Uhungarumlaut" ),
		UnicodeMap::value_type( 0x016a, "Umacron" ),
		UnicodeMap::value_type( 0x0172, "Uogonek" ),
		UnicodeMap::value_type( 0x03a5, "Upsilon" ),
		UnicodeMap::value_type( 0x03d2, "Upsilon1" ),
		UnicodeMap::value_type( 0x03ab, "Upsilondieresis" ),
		UnicodeMap::value_type( 0x038e, "Upsilontonos" ),
		UnicodeMap::value_type( 0x016e, "Uring" ),
		UnicodeMap::value_type( 0xf775, "Usmall" ),
		UnicodeMap::value_type( 0x0168, "Utilde" ),
		UnicodeMap::value_type( 0x0056, "V" ),
		UnicodeMap::value_type( 0xf776, "Vsmall" ),
		UnicodeMap::value_type( 0x0057, "W" ),
		UnicodeMap::value_type( 0x1e82, "Wacute" ),
		UnicodeMap::value_type( 0x0174, "Wcircumflex" ),
		UnicodeMap::value_type( 0x1e84, "Wdieresis" ),
		UnicodeMap::value_type( 0x1e80, "Wgrave" ),
		UnicodeMap::value_type( 0xf777, "Wsmall" ),
		UnicodeMap::value_type( 0x0058, "X" ),
		UnicodeMap::value_type( 0x039e, "Xi" ),
		UnicodeMap::value_type( 0xf778, "Xsmall" ),
		UnicodeMap::value_type( 0x0059, "Y" ),
		UnicodeMap::value_type( 0x00dd, "Yacute" ),
		UnicodeMap::value_type( 0xf7fd, "Yacutesmall" ),
		UnicodeMap::value_type( 0x0176, "Ycircumflex" ),
		UnicodeMap::value_type( 0x0178, "Ydieresis" ),
		UnicodeMap::value_type( 0xf7ff, "Ydieresissmall" ),
		UnicodeMap::value_type( 0x1ef2, "Ygrave" ),
		UnicodeMap::value_type( 0xf779, "Ysmall" ),
		UnicodeMap::value_type( 0x005a, "Z" ),
		UnicodeMap::value_type( 0x0179, "Zacute" ),
		UnicodeMap::value_type( 0x017d, "Zcaron" ),
		UnicodeMap::value_type( 0xf6ff, "Zcaronsmall" ),
		UnicodeMap::value_type( 0x017b, "Zdotaccent" ),
		UnicodeMap::value_type( 0x0396, "Zeta" ),
		UnicodeMap::value_type( 0xf77a, "Zsmall" ),
		UnicodeMap::value_type( 0x0022, "\"" ),
		UnicodeMap::value_type( 0x005c, "\\" ),
		UnicodeMap::value_type( 0x005d, "]" ),
		UnicodeMap::value_type( 0x005e, "^" ),
		UnicodeMap::value_type( 0x005f, "_" ),
		UnicodeMap::value_type( 0x0060, "`" ),
		UnicodeMap::value_type( 0x0061, "a" ),
		UnicodeMap::value_type( 0x00e1, "aacute" ),
		UnicodeMap::value_type( 0x0103, "abreve" ),
		UnicodeMap::value_type( 0x00e2, "acircumflex" ),
		UnicodeMap::value_type( 0x00b4, "acute" ),
		UnicodeMap::value_type( 0x0301, "acutecomb" ),
		UnicodeMap::value_type( 0x00e4, "adieresis" ),
		UnicodeMap::value_type( 0x00e6, "ae" ),
		UnicodeMap::value_type( 0x01fd, "aeacute" ),
		UnicodeMap::value_type( 0x2015, "afii00208" ),
		UnicodeMap::value_type( 0x0410, "afii10017" ),
		UnicodeMap::value_type( 0x0411, "afii10018" ),
		UnicodeMap::value_type( 0x0412, "afii10019" ),
		UnicodeMap::value_type( 0x0413, "afii10020" ),
		UnicodeMap::value_type( 0x0414, "afii10021" ),
		UnicodeMap::value_type( 0x0415, "afii10022" ),
		UnicodeMap::value_type( 0x0401, "afii10023" ),
		UnicodeMap::value_type( 0x0416, "afii10024" ),
		UnicodeMap::value_type( 0x0417, "afii10025" ),
		UnicodeMap::value_type( 0x0418, "afii10026" ),
		UnicodeMap::value_type( 0x0419, "afii10027" ),
		UnicodeMap::value_type( 0x041a, "afii10028" ),
		UnicodeMap::value_type( 0x041b, "afii10029" ),
		UnicodeMap::value_type( 0x041c, "afii10030" ),
		UnicodeMap::value_type( 0x041d, "afii10031" ),
		UnicodeMap::value_type( 0x041e, "afii10032" ),
		UnicodeMap::value_type( 0x041f, "afii10033" ),
		UnicodeMap::value_type( 0x0420, "afii10034" ),
		UnicodeMap::value_type( 0x0421, "afii10035" ),
		UnicodeMap::value_type( 0x0422, "afii10036" ),
		UnicodeMap::value_type( 0x0423, "afii10037" ),
		UnicodeMap::value_type( 0x0424, "afii10038" ),
		UnicodeMap::value_type( 0x0425, "afii10039" ),
		UnicodeMap::value_type( 0x0426, "afii10040" ),
		UnicodeMap::value_type( 0x0427, "afii10041" ),
		UnicodeMap::value_type( 0x0428, "afii10042" ),
		UnicodeMap::value_type( 0x0429, "afii10043" ),
		UnicodeMap::value_type( 0x042a, "afii10044" ),
		UnicodeMap::value_type( 0x042b, "afii10045" ),
		UnicodeMap::value_type( 0x042c, "afii10046" ),
		UnicodeMap::value_type( 0x042d, "afii10047" ),
		UnicodeMap::value_type( 0x042e, "afii10048" ),
		UnicodeMap::value_type( 0x042f, "afii10049" ),
		UnicodeMap::value_type( 0x0490, "afii10050" ),
		UnicodeMap::value_type( 0x0402, "afii10051" ),
		UnicodeMap::value_type( 0x0403, "afii10052" ),
		UnicodeMap::value_type( 0x0404, "afii10053" ),
		UnicodeMap::value_type( 0x0405, "afii10054" ),
		UnicodeMap::value_type( 0x0406, "afii10055" ),
		UnicodeMap::value_type( 0x0407, "afii10056" ),
		UnicodeMap::value_type( 0x0408, "afii10057" ),
		UnicodeMap::value_type( 0x0409, "afii10058" ),
		UnicodeMap::value_type( 0x040a, "afii10059" ),
		UnicodeMap::value_type( 0x040b, "afii10060" ),
		UnicodeMap::value_type( 0x040c, "afii10061" ),
		UnicodeMap::value_type( 0x040e, "afii10062" ),
		UnicodeMap::value_type( 0xf6c4, "afii10063" ),
		UnicodeMap::value_type( 0xf6c5, "afii10064" ),
		UnicodeMap::value_type( 0x0430, "afii10065" ),
		UnicodeMap::value_type( 0x0431, "afii10066" ),
		UnicodeMap::value_type( 0x0432, "afii10067" ),
		UnicodeMap::value_type( 0x0433, "afii10068" ),
		UnicodeMap::value_type( 0x0434, "afii10069" ),
		UnicodeMap::value_type( 0x0435, "afii10070" ),
		UnicodeMap::value_type( 0x0451, "afii10071" ),
		UnicodeMap::value_type( 0x0436, "afii10072" ),
		UnicodeMap::value_type( 0x0437, "afii10073" ),
		UnicodeMap::value_type( 0x0438, "afii10074" ),
		UnicodeMap::value_type( 0x0439, "afii10075" ),
		UnicodeMap::value_type( 0x043a, "afii10076" ),
		UnicodeMap::value_type( 0x043b, "afii10077" ),
		UnicodeMap::value_type( 0x043c, "afii10078" ),
		UnicodeMap::value_type( 0x043d, "afii10079" ),
		UnicodeMap::value_type( 0x043e, "afii10080" ),
		UnicodeMap::value_type( 0x043f, "afii10081" ),
		UnicodeMap::value_type( 0x0440, "afii10082" ),
		UnicodeMap::value_type( 0x0441, "afii10083" ),
		UnicodeMap::value_type( 0x0442, "afii10084" ),
		UnicodeMap::value_type( 0x0443, "afii10085" ),
		UnicodeMap::value_type( 0x0444, "afii10086" ),
		UnicodeMap::value_type( 0x0445, "afii10087" ),
		UnicodeMap::value_type( 0x0446, "afii10088" ),
		UnicodeMap::value_type( 0x0447, "afii10089" ),
		UnicodeMap::value_type( 0x0448, "afii10090" ),
		UnicodeMap::value_type( 0x0449, "afii10091" ),
		UnicodeMap::value_type( 0x044a, "afii10092" ),
		UnicodeMap::value_type( 0x044b, "afii10093" ),
		UnicodeMap::value_type( 0x044c, "afii10094" ),
		UnicodeMap::value_type( 0x044d, "afii10095" ),
		UnicodeMap::value_type( 0x044e, "afii10096" ),
		UnicodeMap::value_type( 0x044f, "afii10097" ),
		UnicodeMap::value_type( 0x0491, "afii10098" ),
		UnicodeMap::value_type( 0x0452, "afii10099" ),
		UnicodeMap::value_type( 0x0453, "afii10100" ),
		UnicodeMap::value_type( 0x0454, "afii10101" ),
		UnicodeMap::value_type( 0x0455, "afii10102" ),
		UnicodeMap::value_type( 0x0456, "afii10103" ),
		UnicodeMap::value_type( 0x0457, "afii10104" ),
		UnicodeMap::value_type( 0x0458, "afii10105" ),
		UnicodeMap::value_type( 0x0459, "afii10106" ),
		UnicodeMap::value_type( 0x045a, "afii10107" ),
		UnicodeMap::value_type( 0x045b, "afii10108" ),
		UnicodeMap::value_type( 0x045c, "afii10109" ),
		UnicodeMap::value_type( 0x045e, "afii10110" ),
		UnicodeMap::value_type( 0x040f, "afii10145" ),
		UnicodeMap::value_type( 0x0462, "afii10146" ),
		UnicodeMap::value_type( 0x0472, "afii10147" ),
		UnicodeMap::value_type( 0x0474, "afii10148" ),
		UnicodeMap::value_type( 0xf6c6, "afii10192" ),
		UnicodeMap::value_type( 0x045f, "afii10193" ),
		UnicodeMap::value_type( 0x0463, "afii10194" ),
		UnicodeMap::value_type( 0x0473, "afii10195" ),
		UnicodeMap::value_type( 0x0475, "afii10196" ),
		UnicodeMap::value_type( 0xf6c7, "afii10831" ),
		UnicodeMap::value_type( 0xf6c8, "afii10832" ),
		UnicodeMap::value_type( 0x04d9, "afii10846" ),
		UnicodeMap::value_type( 0x200e, "afii299" ),
		UnicodeMap::value_type( 0x200f, "afii300" ),
		UnicodeMap::value_type( 0x200d, "afii301" ),
		UnicodeMap::value_type( 0x066a, "afii57381" ),
		UnicodeMap::value_type( 0x060c, "afii57388" ),
		UnicodeMap::value_type( 0x0660, "afii57392" ),
		UnicodeMap::value_type( 0x0661, "afii57393" ),
		UnicodeMap::value_type( 0x0662, "afii57394" ),
		UnicodeMap::value_type( 0x0663, "afii57395" ),
		UnicodeMap::value_type( 0x0664, "afii57396" ),
		UnicodeMap::value_type( 0x0665, "afii57397" ),
		UnicodeMap::value_type( 0x0666, "afii57398" ),
		UnicodeMap::value_type( 0x0667, "afii57399" ),
		UnicodeMap::value_type( 0x0668, "afii57400" ),
		UnicodeMap::value_type( 0x0669, "afii57401" ),
		UnicodeMap::value_type( 0x061b, "afii57403" ),
		UnicodeMap::value_type( 0x061f, "afii57407" ),
		UnicodeMap::value_type( 0x0621, "afii57409" ),
		UnicodeMap::value_type( 0x0622, "afii57410" ),
		UnicodeMap::value_type( 0x0623, "afii57411" ),
		UnicodeMap::value_type( 0x0624, "afii57412" ),
		UnicodeMap::value_type( 0x0625, "afii57413" ),
		UnicodeMap::value_type( 0x0626, "afii57414" ),
		UnicodeMap::value_type( 0x0627, "afii57415" ),
		UnicodeMap::value_type( 0x0628, "afii57416" ),
		UnicodeMap::value_type( 0x0629, "afii57417" ),
		UnicodeMap::value_type( 0x062a, "afii57418" ),
		UnicodeMap::value_type( 0x062b, "afii57419" ),
		UnicodeMap::value_type( 0x062c, "afii57420" ),
		UnicodeMap::value_type( 0x062d, "afii57421" ),
		UnicodeMap::value_type( 0x062e, "afii57422" ),
		UnicodeMap::value_type( 0x062f, "afii57423" ),
		UnicodeMap::value_type( 0x0630, "afii57424" ),
		UnicodeMap::value_type( 0x0631, "afii57425" ),
		UnicodeMap::value_type( 0x0632, "afii57426" ),
		UnicodeMap::value_type( 0x0633, "afii57427" ),
		UnicodeMap::value_type( 0x0634, "afii57428" ),
		UnicodeMap::value_type( 0x0635, "afii57429" ),
		UnicodeMap::value_type( 0x0636, "afii57430" ),
		UnicodeMap::value_type( 0x0637, "afii57431" ),
		UnicodeMap::value_type( 0x0638, "afii57432" ),
		UnicodeMap::value_type( 0x0639, "afii57433" ),
		UnicodeMap::value_type( 0x063a, "afii57434" ),
		UnicodeMap::value_type( 0x0640, "afii57440" ),
		UnicodeMap::value_type( 0x0641, "afii57441" ),
		UnicodeMap::value_type( 0x0642, "afii57442" ),
		UnicodeMap::value_type( 0x0643, "afii57443" ),
		UnicodeMap::value_type( 0x0644, "afii57444" ),
		UnicodeMap::value_type( 0x0645, "afii57445" ),
		UnicodeMap::value_type( 0x0646, "afii57446" ),
		UnicodeMap::value_type( 0x0648, "afii57448" ),
		UnicodeMap::value_type( 0x0649, "afii57449" ),
		UnicodeMap::value_type( 0x064a, "afii57450" ),
		UnicodeMap::value_type( 0x064b, "afii57451" ),
		UnicodeMap::value_type( 0x064c, "afii57452" ),
		UnicodeMap::value_type( 0x064d, "afii57453" ),
		UnicodeMap::value_type( 0x064e, "afii57454" ),
		UnicodeMap::value_type( 0x064f, "afii57455" ),
		UnicodeMap::value_type( 0x0650, "afii57456" ),
		UnicodeMap::value_type( 0x0651, "afii57457" ),
		UnicodeMap::value_type( 0x0652, "afii57458" ),
		UnicodeMap::value_type( 0x0647, "afii57470" ),
		UnicodeMap::value_type( 0x06a4, "afii57505" ),
		UnicodeMap::value_type( 0x067e, "afii57506" ),
		UnicodeMap::value_type( 0x0686, "afii57507" ),
		UnicodeMap::value_type( 0x0698, "afii57508" ),
		UnicodeMap::value_type( 0x06af, "afii57509" ),
		UnicodeMap::value_type( 0x0679, "afii57511" ),
		UnicodeMap::value_type( 0x0688, "afii57512" ),
		UnicodeMap::value_type( 0x0691, "afii57513" ),
		UnicodeMap::value_type( 0x06ba, "afii57514" ),
		UnicodeMap::value_type( 0x06d2, "afii57519" ),
		UnicodeMap::value_type( 0x06d5, "afii57534" ),
		UnicodeMap::value_type( 0x20aa, "afii57636" ),
		UnicodeMap::value_type( 0x05be, "afii57645" ),
		UnicodeMap::value_type( 0x05c3, "afii57658" ),
		UnicodeMap::value_type( 0x05d0, "afii57664" ),
		UnicodeMap::value_type( 0x05d1, "afii57665" ),
		UnicodeMap::value_type( 0x05d2, "afii57666" ),
		UnicodeMap::value_type( 0x05d3, "afii57667" ),
		UnicodeMap::value_type( 0x05d4, "afii57668" ),
		UnicodeMap::value_type( 0x05d5, "afii57669" ),
		UnicodeMap::value_type( 0x05d6, "afii57670" ),
		UnicodeMap::value_type( 0x05d7, "afii57671" ),
		UnicodeMap::value_type( 0x05d8, "afii57672" ),
		UnicodeMap::value_type( 0x05d9, "afii57673" ),
		UnicodeMap::value_type( 0x05da, "afii57674" ),
		UnicodeMap::value_type( 0x05db, "afii57675" ),
		UnicodeMap::value_type( 0x05dc, "afii57676" ),
		UnicodeMap::value_type( 0x05dd, "afii57677" ),
		UnicodeMap::value_type( 0x05de, "afii57678" ),
		UnicodeMap::value_type( 0x05df, "afii57679" ),
		UnicodeMap::value_type( 0x05e0, "afii57680" ),
		UnicodeMap::value_type( 0x05e1, "afii57681" ),
		UnicodeMap::value_type( 0x05e2, "afii57682" ),
		UnicodeMap::value_type( 0x05e3, "afii57683" ),
		UnicodeMap::value_type( 0x05e4, "afii57684" ),
		UnicodeMap::value_type( 0x05e5, "afii57685" ),
		UnicodeMap::value_type( 0x05e6, "afii57686" ),
		UnicodeMap::value_type( 0x05e7, "afii57687" ),
		UnicodeMap::value_type( 0x05e8, "afii57688" ),
		UnicodeMap::value_type( 0x05e9, "afii57689" ),
		UnicodeMap::value_type( 0x05ea, "afii57690" ),
		UnicodeMap::value_type( 0xfb2a, "afii57694" ),
		UnicodeMap::value_type( 0xfb2b, "afii57695" ),
		UnicodeMap::value_type( 0xfb4b, "afii57700" ),
		UnicodeMap::value_type( 0xfb1f, "afii57705" ),
		UnicodeMap::value_type( 0x05f0, "afii57716" ),
		UnicodeMap::value_type( 0x05f1, "afii57717" ),
		UnicodeMap::value_type( 0x05f2, "afii57718" ),
		UnicodeMap::value_type( 0xfb35, "afii57723" ),
		UnicodeMap::value_type( 0x05b4, "afii57793" ),
		UnicodeMap::value_type( 0x05b5, "afii57794" ),
		UnicodeMap::value_type( 0x05b6, "afii57795" ),
		UnicodeMap::value_type( 0x05bb, "afii57796" ),
		UnicodeMap::value_type( 0x05b8, "afii57797" ),
		UnicodeMap::value_type( 0x05b7, "afii57798" ),
		UnicodeMap::value_type( 0x05b0, "afii57799" ),
		UnicodeMap::value_type( 0x05b2, "afii57800" ),
		UnicodeMap::value_type( 0x05b1, "afii57801" ),
		UnicodeMap::value_type( 0x05b3, "afii57802" ),
		UnicodeMap::value_type( 0x05c2, "afii57803" ),
		UnicodeMap::value_type( 0x05c1, "afii57804" ),
		UnicodeMap::value_type( 0x05b9, "afii57806" ),
		UnicodeMap::value_type( 0x05bc, "afii57807" ),
		UnicodeMap::value_type( 0x05bd, "afii57839" ),
		UnicodeMap::value_type( 0x05bf, "afii57841" ),
		UnicodeMap::value_type( 0x05c0, "afii57842" ),
		UnicodeMap::value_type( 0x02bc, "afii57929" ),
		UnicodeMap::value_type( 0x2105, "afii61248" ),
		UnicodeMap::value_type( 0x2113, "afii61289" ),
		UnicodeMap::value_type( 0x2116, "afii61352" ),
		UnicodeMap::value_type( 0x202c, "afii61573" ),
		UnicodeMap::value_type( 0x202d, "afii61574" ),
		UnicodeMap::value_type( 0x202e, "afii61575" ),
		UnicodeMap::value_type( 0x200c, "afii61664" ),
		UnicodeMap::value_type( 0x066d, "afii63167" ),
		UnicodeMap::value_type( 0x02bd, "afii64937" ),
		UnicodeMap::value_type( 0x00e0, "agrave" ),
		UnicodeMap::value_type( 0x2135, "aleph" ),
		UnicodeMap::value_type( 0x03b1, "alpha" ),
		UnicodeMap::value_type( 0x03ac, "alphatonos" ),
		UnicodeMap::value_type( 0x0101, "amacron" ),
		UnicodeMap::value_type( 0x0026, "ampersand" ),
		UnicodeMap::value_type( 0xf726, "ampersandsmall" ),
		UnicodeMap::value_type( 0x2220, "angle" ),
		UnicodeMap::value_type( 0x2329, "angleleft" ),
		UnicodeMap::value_type( 0x232a, "angleright" ),
		UnicodeMap::value_type( 0x0387, "anoteleia" ),
		UnicodeMap::value_type( 0x0105, "aogonek" ),
		UnicodeMap::value_type( 0x2248, "approxequal" ),
		UnicodeMap::value_type( 0x00e5, "aring" ),
		UnicodeMap::value_type( 0x01fb, "aringacute" ),
		UnicodeMap::value_type( 0x2194, "arrowboth" ),
		UnicodeMap::value_type( 0x21d4, "arrowdblboth" ),
		UnicodeMap::value_type( 0x21d3, "arrowdbldown" ),
		UnicodeMap::value_type( 0x21d0, "arrowdblleft" ),
		UnicodeMap::value_type( 0x21d2, "arrowdblright" ),
		UnicodeMap::value_type( 0x21d1, "arrowdblup" ),
		UnicodeMap::value_type( 0x2193, "arrowdown" ),
		UnicodeMap::value_type( 0xf8e7, "arrowhorizex" ),
		UnicodeMap::value_type( 0x2190, "arrowleft" ),
		UnicodeMap::value_type( 0x2192, "arrowright" ),
		UnicodeMap::value_type( 0x2191, "arrowup" ),
		UnicodeMap::value_type( 0x2195, "arrowupdn" ),
		UnicodeMap::value_type( 0x21a8, "arrowupdnbse" ),
		UnicodeMap::value_type( 0xf8e6, "arrowvertex" ),
		UnicodeMap::value_type( 0x005e, "asciicircum" ),
		UnicodeMap::value_type( 0x007e, "asciitilde" ),
		UnicodeMap::value_type( 0x002a, "asterisk" ),
		UnicodeMap::value_type( 0x2217, "asteriskmath" ),
		UnicodeMap::value_type( 0xf6e9, "asuperior" ),
		UnicodeMap::value_type( 0x0040, "at" ),
		UnicodeMap::value_type( 0x00e3, "atilde" ),
		UnicodeMap::value_type( 0x0062, "b" ),
		UnicodeMap::value_type( 0x005c, "backslash" ),
		UnicodeMap::value_type( 0x007c, "bar" ),
		UnicodeMap::value_type( 0x03b2, "beta" ),
		UnicodeMap::value_type( 0x2588, "block" ),
		UnicodeMap::value_type( 0xf8f4, "braceex" ),
		UnicodeMap::value_type( 0x007b, "braceleft" ),
		UnicodeMap::value_type( 0xf8f3, "braceleftbt" ),
		UnicodeMap::value_type( 0xf8f2, "braceleftmid" ),
		UnicodeMap::value_type( 0xf8f1, "bracelefttp" ),
		UnicodeMap::value_type( 0x007d, "braceright" ),
		UnicodeMap::value_type( 0xf8fe, "bracerightbt" ),
		UnicodeMap::value_type( 0xf8fd, "bracerightmid" ),
		UnicodeMap::value_type( 0xf8fc, "bracerighttp" ),
		UnicodeMap::value_type( 0x005b, "bracketleft" ),
		UnicodeMap::value_type( 0xf8f0, "bracketleftbt" ),
		UnicodeMap::value_type( 0xf8ef, "bracketleftex" ),
		UnicodeMap::value_type( 0xf8ee, "bracketlefttp" ),
		UnicodeMap::value_type( 0x005d, "bracketright" ),
		UnicodeMap::value_type( 0xf8fb, "bracketrightbt" ),
		UnicodeMap::value_type( 0xf8fa, "bracketrightex" ),
		UnicodeMap::value_type( 0xf8f9, "bracketrighttp" ),
		UnicodeMap::value_type( 0x02d8, "breve" ),
		UnicodeMap::value_type( 0x00a6, "brokenbar" ),
		UnicodeMap::value_type( 0xf6ea, "bsuperior" ),
		UnicodeMap::value_type( 0x2022, "bullet" ),
		UnicodeMap::value_type( 0x0063, "c" ),
		UnicodeMap::value_type( 0x0107, "cacute" ),
		UnicodeMap::value_type( 0x02c7, "caron" ),
		UnicodeMap::value_type( 0x21b5, "carriagereturn" ),
		UnicodeMap::value_type( 0x010d, "ccaron" ),
		UnicodeMap::value_type( 0x00e7, "ccedilla" ),
		UnicodeMap::value_type( 0x0109, "ccircumflex" ),
		UnicodeMap::value_type( 0x010b, "cdotaccent" ),
		UnicodeMap::value_type( 0x00b8, "cedilla" ),
		UnicodeMap::value_type( 0x00a2, "cent" ),
		UnicodeMap::value_type( 0xf6df, "centinferior" ),
		UnicodeMap::value_type( 0xf7a2, "centoldstyle" ),
		UnicodeMap::value_type( 0xf6e0, "centsuperior" ),
		UnicodeMap::value_type( 0x03c7, "chi" ),
		UnicodeMap::value_type( 0x25cb, "circle" ),
		UnicodeMap::value_type( 0x2297, "circlemultiply" ),
		UnicodeMap::value_type( 0x2295, "circleplus" ),
		UnicodeMap::value_type( 0x02c6, "circumflex" ),
		UnicodeMap::value_type( 0x2663, "club" ),
		UnicodeMap::value_type( 0x003a, "colon" ),
		UnicodeMap::value_type( 0x20a1, "colonmonetary" ),
		UnicodeMap::value_type( 0x002c, "comma" ),
		UnicodeMap::value_type( 0xf6c3, "commaaccent" ),
		UnicodeMap::value_type( 0xf6e1, "commainferior" ),
		UnicodeMap::value_type( 0xf6e2, "commasuperior" ),
		UnicodeMap::value_type( 0x2245, "congruent" ),
		UnicodeMap::value_type( 0x00a9, "copyright" ),
		UnicodeMap::value_type( 0x00a9, "copyrightsans" ),
		UnicodeMap::value_type( 0x00a9, "copyrightserif" ),
		UnicodeMap::value_type( 0x00a4, "currency" ),
		UnicodeMap::value_type( 0xf6d1, "cyrBreve" ),
		UnicodeMap::value_type( 0xf6d2, "cyrFlex" ),
		UnicodeMap::value_type( 0xf6d4, "cyrbreve" ),
		UnicodeMap::value_type( 0xf6d5, "cyrflex" ),
		UnicodeMap::value_type( 0x0064, "d" ),
		UnicodeMap::value_type( 0x2020, "dagger" ),
		UnicodeMap::value_type( 0x2021, "daggerdbl" ),
		UnicodeMap::value_type( 0xf6d3, "dblGrave" ),
		UnicodeMap::value_type( 0xf6d6, "dblgrave" ),
		UnicodeMap::value_type( 0x010f, "dcaron" ),
		UnicodeMap::value_type( 0x0111, "dcroat" ),
		UnicodeMap::value_type( 0x00b0, "degree" ),
		UnicodeMap::value_type( 0x03b4, "delta" ),
		UnicodeMap::value_type( 0x2666, "diamond" ),
		UnicodeMap::value_type( 0x00a8, "dieresis" ),
		UnicodeMap::value_type( 0xf6d7, "dieresisacute" ),
		UnicodeMap::value_type( 0xf6d8, "dieresisgrave" ),
		UnicodeMap::value_type( 0x0385, "dieresistonos" ),
		UnicodeMap::value_type( 0x00f7, "divide" ),
		UnicodeMap::value_type( 0x2593, "dkshade" ),
		UnicodeMap::value_type( 0x2584, "dnblock" ),
		UnicodeMap::value_type( 0x0024, "dollar" ),
		UnicodeMap::value_type( 0xf6e3, "dollarinferior" ),
		UnicodeMap::value_type( 0xf724, "dollaroldstyle" ),
		UnicodeMap::value_type( 0xf6e4, "dollarsuperior" ),
		UnicodeMap::value_type( 0x20ab, "dong" ),
		UnicodeMap::value_type( 0x02d9, "dotaccent" ),
		UnicodeMap::value_type( 0x0323, "dotbelowcomb" ),
		UnicodeMap::value_type( 0x0131, "dotlessi" ),
		UnicodeMap::value_type( 0xf6be, "dotlessj" ),
		UnicodeMap::value_type( 0x22c5, "dotmath" ),
		UnicodeMap::value_type( 0xf6eb, "dsuperior" ),
		UnicodeMap::value_type( 0x0065, "e" ),
		UnicodeMap::value_type( 0x00e9, "eacute" ),
		UnicodeMap::value_type( 0x0115, "ebreve" ),
		UnicodeMap::value_type( 0x011b, "ecaron" ),
		UnicodeMap::value_type( 0x00ea, "ecircumflex" ),
		UnicodeMap::value_type( 0x00eb, "edieresis" ),
		UnicodeMap::value_type( 0x0117, "edotaccent" ),
		UnicodeMap::value_type( 0x00e8, "egrave" ),
		UnicodeMap::value_type( 0x0038, "eight" ),
		UnicodeMap::value_type( 0x2088, "eightinferior" ),
		UnicodeMap::value_type( 0xf738, "eightoldstyle" ),
		UnicodeMap::value_type( 0x2078, "eightsuperior" ),
		UnicodeMap::value_type( 0x2208, "element" ),
		UnicodeMap::value_type( 0x2026, "ellipsis" ),
		UnicodeMap::value_type( 0x0113, "emacron" ),
		UnicodeMap::value_type( 0x2014, "emdash" ),
		UnicodeMap::value_type( 0x2205, "emptyset" ),
		UnicodeMap::value_type( 0x2013, "endash" ),
		UnicodeMap::value_type( 0x014b, "eng" ),
		UnicodeMap::value_type( 0x0119, "eogonek" ),
		UnicodeMap::value_type( 0x03b5, "epsilon" ),
		UnicodeMap::value_type( 0x03ad, "epsilontonos" ),
		UnicodeMap::value_type( 0x003d, "equal" ),
		UnicodeMap::value_type( 0x2261, "equivalence" ),
		UnicodeMap::value_type( 0x212e, "estimated" ),
		UnicodeMap::value_type( 0xf6ec, "esuperior" ),
		UnicodeMap::value_type( 0x03b7, "eta" ),
		UnicodeMap::value_type( 0x03ae, "etatonos" ),
		UnicodeMap::value_type( 0x00f0, "eth" ),
		UnicodeMap::value_type( 0x0021, "exclam" ),
		UnicodeMap::value_type( 0x203c, "exclamdbl" ),
		UnicodeMap::value_type( 0x00a1, "exclamdown" ),
		UnicodeMap::value_type( 0xf7a1, "exclamdownsmall" ),
		UnicodeMap::value_type( 0x0021, "exclamleft" ),
		UnicodeMap::value_type( 0xf721, "exclamsmall" ),
		UnicodeMap::value_type( 0x2203, "existential" ),
		UnicodeMap::value_type( 0x0066, "f" ),
		UnicodeMap::value_type( 0x2640, "female" ),
		UnicodeMap::value_type( 0xfb00, "ff" ),
		UnicodeMap::value_type( 0xfb03, "ffi" ),
		UnicodeMap::value_type( 0xfb04, "ffl" ),
		UnicodeMap::value_type( 0xfb01, "fi" ),
		UnicodeMap::value_type( 0x2012, "figuredash" ),
		UnicodeMap::value_type( 0x25a0, "filledbox" ),
		UnicodeMap::value_type( 0x25ac, "filledrect" ),
		UnicodeMap::value_type( 0x0035, "five" ),
		UnicodeMap::value_type( 0x215d, "fiveeighths" ),
		UnicodeMap::value_type( 0x2085, "fiveinferior" ),
		UnicodeMap::value_type( 0xf735, "fiveoldstyle" ),
		UnicodeMap::value_type( 0x2075, "fivesuperior" ),
		UnicodeMap::value_type( 0xfb02, "fl" ),
		UnicodeMap::value_type( 0x0192, "florin" ),
		UnicodeMap::value_type( 0x0034, "four" ),
		UnicodeMap::value_type( 0x2084, "fourinferior" ),
		UnicodeMap::value_type( 0xf734, "fouroldstyle" ),
		UnicodeMap::value_type( 0x2074, "foursuperior" ),
		UnicodeMap::value_type( 0x2044, "fraction" ),
		UnicodeMap::value_type( 0x20a3, "franc" ),
		UnicodeMap::value_type( 0x0067, "g" ),
		UnicodeMap::value_type( 0x03b3, "gamma" ),
		UnicodeMap::value_type( 0x011f, "gbreve" ),
		UnicodeMap::value_type( 0x01e7, "gcaron" ),
		UnicodeMap::value_type( 0x011d, "gcircumflex" ),
		UnicodeMap::value_type( 0x0123, "gcommaaccent" ),
		UnicodeMap::value_type( 0x0121, "gdotaccent" ),
		UnicodeMap::value_type( 0x00df, "germandbls" ),
		UnicodeMap::value_type( 0x2207, "gradient" ),
		UnicodeMap::value_type( 0x0060, "grave" ),
		UnicodeMap::value_type( 0x0300, "gravecomb" ),
		UnicodeMap::value_type( 0x003e, "greater" ),
		UnicodeMap::value_type( 0x2265, "greaterequal" ),
		UnicodeMap::value_type( 0x00ab, "guillemotleft" ),
		UnicodeMap::value_type( 0x00bb, "guillemotright" ),
		UnicodeMap::value_type( 0x2039, "guilsinglleft" ),
		UnicodeMap::value_type( 0x203a, "guilsinglright" ),
		UnicodeMap::value_type( 0x0068, "h" ),
		UnicodeMap::value_type( 0x0127, "hbar" ),
		UnicodeMap::value_type( 0x0125, "hcircumflex" ),
		UnicodeMap::value_type( 0x2665, "heart" ),
		UnicodeMap::value_type( 0x0309, "hookabovecomb" ),
		UnicodeMap::value_type( 0x2302, "house" ),
		UnicodeMap::value_type( 0x02dd, "hungarumlaut" ),
		UnicodeMap::value_type( 0x002d, "hyphen" ),
		UnicodeMap::value_type( 0xf6e5, "hypheninferior" ),
		UnicodeMap::value_type( 0xf6e6, "hyphensuperior" ),
		UnicodeMap::value_type( 0x0069, "i" ),
		UnicodeMap::value_type( 0x00ed, "iacute" ),
		UnicodeMap::value_type( 0x012d, "ibreve" ),
		UnicodeMap::value_type( 0x00ee, "icircumflex" ),
		UnicodeMap::value_type( 0x00ef, "idieresis" ),
		UnicodeMap::value_type( 0x00ec, "igrave" ),
		UnicodeMap::value_type( 0x0133, "ij" ),
		UnicodeMap::value_type( 0x012b, "imacron" ),
		UnicodeMap::value_type( 0x221e, "infinity" ),
		UnicodeMap::value_type( 0x222b, "integral" ),
		UnicodeMap::value_type( 0x2321, "integralbt" ),
		UnicodeMap::value_type( 0xf8f5, "integralex" ),
		UnicodeMap::value_type( 0x2320, "integraltp" ),
		UnicodeMap::value_type( 0x2229, "intersection" ),
		UnicodeMap::value_type( 0x25d8, "invbullet" ),
		UnicodeMap::value_type( 0x25d9, "invcircle" ),
		UnicodeMap::value_type( 0x263b, "invsmileface" ),
		UnicodeMap::value_type( 0x012f, "iogonek" ),
		UnicodeMap::value_type( 0x03b9, "iota" ),
		UnicodeMap::value_type( 0x03ca, "iotadieresis" ),
		UnicodeMap::value_type( 0x0390, "iotadieresistonos" ),
		UnicodeMap::value_type( 0x03af, "iotatonos" ),
		UnicodeMap::value_type( 0xf6ed, "isuperior" ),
		UnicodeMap::value_type( 0x0129, "itilde" ),
		UnicodeMap::value_type( 0x006a, "j" ),
		UnicodeMap::value_type( 0x0135, "jcircumflex" ),
		UnicodeMap::value_type( 0x006b, "k" ),
		UnicodeMap::value_type( 0x03ba, "kappa" ),
		UnicodeMap::value_type( 0x0137, "kcommaaccent" ),
		UnicodeMap::value_type( 0x0138, "kgreenlandic" ),
		UnicodeMap::value_type( 0x006c, "l" ),
		UnicodeMap::value_type( 0x013a, "lacute" ),
		UnicodeMap::value_type( 0x03bb, "lambda" ),
		UnicodeMap::value_type( 0x013e, "lcaron" ),
		UnicodeMap::value_type( 0x013c, "lcommaaccent" ),
		UnicodeMap::value_type( 0x0140, "ldot" ),
		UnicodeMap::value_type( 0x003c, "less" ),
		UnicodeMap::value_type( 0x2264, "lessequal" ),
		UnicodeMap::value_type( 0x258c, "lfblock" ),
		UnicodeMap::value_type( 0x20a4, "lira" ),
		UnicodeMap::value_type( 0xf6c0, "ll" ),
		UnicodeMap::value_type( 0x2227, "logicaland" ),
		UnicodeMap::value_type( 0x00ac, "logicalnot" ),
		UnicodeMap::value_type( 0x2228, "logicalor" ),
		UnicodeMap::value_type( 0x017f, "longs" ),
		UnicodeMap::value_type( 0x25ca, "lozenge" ),
		UnicodeMap::value_type( 0x0142, "lslash" ),
		UnicodeMap::value_type( 0xf6ee, "lsuperior" ),
		UnicodeMap::value_type( 0x2591, "ltshade" ),
		UnicodeMap::value_type( 0x006d, "m" ),
		UnicodeMap::value_type( 0x00af, "macron" ),
		UnicodeMap::value_type( 0x2642, "male" ),
		UnicodeMap::value_type( 0x2212, "minus" ),
		UnicodeMap::value_type( 0x2032, "minute" ),
		UnicodeMap::value_type( 0xf6ef, "msuperior" ),
		UnicodeMap::value_type( 0x00b5, "mu" ),
		UnicodeMap::value_type( 0x00d7, "multiply" ),
		UnicodeMap::value_type( 0x266a, "musicalnote" ),
		UnicodeMap::value_type( 0x266b, "musicalnotedbl" ),
		UnicodeMap::value_type( 0x006e, "n" ),
		UnicodeMap::value_type( 0x0144, "nacute" ),
		UnicodeMap::value_type( 0x0149, "napostrophe" ),
		UnicodeMap::value_type( 0x00a0, "nbspace" ),
		UnicodeMap::value_type( 0x0148, "ncaron" ),
		UnicodeMap::value_type( 0x0146, "ncommaaccent" ),
		UnicodeMap::value_type( 0x0039, "nine" ),
		UnicodeMap::value_type( 0x2089, "nineinferior" ),
		UnicodeMap::value_type( 0xf739, "nineoldstyle" ),
		UnicodeMap::value_type( 0x2079, "ninesuperior" ),
		UnicodeMap::value_type( 0x00a0, "nonbreakingspace" ),
		UnicodeMap::value_type( 0x2209, "notelement" ),
		UnicodeMap::value_type( 0x2260, "notequal" ),
		UnicodeMap::value_type( 0x2284, "notsubset" ),
		UnicodeMap::value_type( 0x207f, "nsuperior" ),
		UnicodeMap::value_type( 0x00f1, "ntilde" ),
		UnicodeMap::value_type( 0x03bd, "nu" ),
		UnicodeMap::value_type( 0x0023, "numbersign" ),
		UnicodeMap::value_type( 0x006f, "o" ),
		UnicodeMap::value_type( 0x00f3, "oacute" ),
		UnicodeMap::value_type( 0x014f, "obreve" ),
		UnicodeMap::value_type( 0x00f4, "ocircumflex" ),
		UnicodeMap::value_type( 0x00f6, "odieresis" ),
		UnicodeMap::value_type( 0x0153, "oe" ),
		UnicodeMap::value_type( 0x02db, "ogonek" ),
		UnicodeMap::value_type( 0x00f2, "ograve" ),
		UnicodeMap::value_type( 0x01a1, "ohorn" ),
		UnicodeMap::value_type( 0x0151, "ohungarumlaut" ),
		UnicodeMap::value_type( 0x014d, "omacron" ),
		UnicodeMap::value_type( 0x03c9, "omega" ),
		UnicodeMap::value_type( 0x03d6, "omega1" ),
		UnicodeMap::value_type( 0x03ce, "omegatonos" ),
		UnicodeMap::value_type( 0x03bf, "omicron" ),
		UnicodeMap::value_type( 0x03cc, "omicrontonos" ),
		UnicodeMap::value_type( 0x0031, "one" ),
		UnicodeMap::value_type( 0x2024, "onedotenleader" ),
		UnicodeMap::value_type( 0x215b, "oneeighth" ),
		UnicodeMap::value_type( 0xf6dc, "onefitted" ),
		UnicodeMap::value_type( 0x00bd, "onehalf" ),
		UnicodeMap::value_type( 0x2081, "oneinferior" ),
		UnicodeMap::value_type( 0xf731, "oneoldstyle" ),
		UnicodeMap::value_type( 0x00bc, "onequarter" ),
		UnicodeMap::value_type( 0x00b9, "onesuperior" ),
		UnicodeMap::value_type( 0x2153, "onethird" ),
		UnicodeMap::value_type( 0x25e6, "openbullet" ),
		UnicodeMap::value_type( 0x00aa, "ordfeminine" ),
		UnicodeMap::value_type( 0x00ba, "ordmasculine" ),
		UnicodeMap::value_type( 0x221f, "orthogonal" ),
		UnicodeMap::value_type( 0x00f8, "oslash" ),
		UnicodeMap::value_type( 0x01ff, "oslashacute" ),
		UnicodeMap::value_type( 0xf6f0, "osuperior" ),
		UnicodeMap::value_type( 0x00f5, "otilde" ),
		UnicodeMap::value_type( 0x0070, "p" ),
		UnicodeMap::value_type( 0x00b6, "paragraph" ),
		UnicodeMap::value_type( 0x0028, "parenleft" ),
		UnicodeMap::value_type( 0xf8ed, "parenleftbt" ),
		UnicodeMap::value_type( 0xf8ec, "parenleftex" ),
		UnicodeMap::value_type( 0x208d, "parenleftinferior" ),
		UnicodeMap::value_type( 0x207d, "parenleftsuperior" ),
		UnicodeMap::value_type( 0xf8eb, "parenlefttp" ),
		UnicodeMap::value_type( 0x0029, "parenright" ),
		UnicodeMap::value_type( 0xf8f8, "parenrightbt" ),
		UnicodeMap::value_type( 0xf8f7, "parenrightex" ),
		UnicodeMap::value_type( 0x208e, "parenrightinferior" ),
		UnicodeMap::value_type( 0x207e, "parenrightsuperior" ),
		UnicodeMap::value_type( 0xf8f6, "parenrighttp" ),
		UnicodeMap::value_type( 0x2202, "partialdiff" ),
		UnicodeMap::value_type( 0x0025, "percent" ),
		UnicodeMap::value_type( 0x002e, "period" ),
		UnicodeMap::value_type( 0x00b7, "periodcentered" ),
		UnicodeMap::value_type( 0xf6e7, "periodinferior" ),
		UnicodeMap::value_type( 0xf6e8, "periodsuperior" ),
		UnicodeMap::value_type( 0x22a5, "perpendicular" ),
		UnicodeMap::value_type( 0x2030, "perthousand" ),
		UnicodeMap::value_type( 0x20a7, "peseta" ),
		UnicodeMap::value_type( 0x03c6, "phi" ),
		UnicodeMap::value_type( 0x03d5, "phi1" ),
		UnicodeMap::value_type( 0x03c0, "pi" ),
		UnicodeMap::value_type( 0x002b, "plus" ),
		UnicodeMap::value_type( 0x00b1, "plusminus" ),
		UnicodeMap::value_type( 0x211e, "prescription" ),
		UnicodeMap::value_type( 0x220f, "product" ),
		UnicodeMap::value_type( 0x2282, "propersubset" ),
		UnicodeMap::value_type( 0x2283, "propersuperset" ),
		UnicodeMap::value_type( 0x221d, "proportional" ),
		UnicodeMap::value_type( 0x03c8, "psi" ),
		UnicodeMap::value_type( 0x0071, "q" ),
		UnicodeMap::value_type( 0x003f, "question" ),
		UnicodeMap::value_type( 0x00bf, "questiondown" ),
		UnicodeMap::value_type( 0xf7bf, "questiondownsmall" ),
		UnicodeMap::value_type( 0xf73f, "questionsmall" ),
		UnicodeMap::value_type( 0x0022, "quotedbl" ),
		UnicodeMap::value_type( 0x201e, "quotedblbase" ),
		UnicodeMap::value_type( 0x201c, "quotedblleft" ),
		UnicodeMap::value_type( 0x201d, "quotedblright" ),
		UnicodeMap::value_type( 0x2018, "quoteleft" ),
		UnicodeMap::value_type( 0x201b, "quotereversed" ),
		UnicodeMap::value_type( 0x2019, "quoteright" ),
		UnicodeMap::value_type( 0x201a, "quotesinglbase" ),
		UnicodeMap::value_type( 0x0027, "quotesingle" ),
		UnicodeMap::value_type( 0x0072, "r" ),
		UnicodeMap::value_type( 0x0155, "racute" ),
		UnicodeMap::value_type( 0x221a, "radical" ),
		UnicodeMap::value_type( 0xf8e5, "radicalex" ),
		UnicodeMap::value_type( 0x0159, "rcaron" ),
		UnicodeMap::value_type( 0x0157, "rcommaaccent" ),
		UnicodeMap::value_type( 0x2286, "reflexsubset" ),
		UnicodeMap::value_type( 0x2287, "reflexsuperset" ),
		UnicodeMap::value_type( 0x00ae, "registered" ),
		UnicodeMap::value_type( 0x00ae, "registersans" ),
		UnicodeMap::value_type( 0x00ae, "registerserif" ),
		UnicodeMap::value_type( 0x2310, "revlogicalnot" ),
		UnicodeMap::value_type( 0x03c1, "rho" ),
		UnicodeMap::value_type( 0x02da, "ring" ),
		UnicodeMap::value_type( 0xf6f1, "rsuperior" ),
		UnicodeMap::value_type( 0x2590, "rtblock" ),
		UnicodeMap::value_type( 0xf6dd, "rupiah" ),
		UnicodeMap::value_type( 0x0073, "s" ),
		UnicodeMap::value_type( 0x015b, "sacute" ),
		UnicodeMap::value_type( 0x0161, "scaron" ),
		UnicodeMap::value_type( 0x015f, "scedilla" ),
		UnicodeMap::value_type( 0x015d, "scircumflex" ),
		UnicodeMap::value_type( 0x0219, "scommaaccent" ),
		UnicodeMap::value_type( 0x2033, "second" ),
		UnicodeMap::value_type( 0x00a7, "section" ),
		UnicodeMap::value_type( 0x003b, "semicolon" ),
		UnicodeMap::value_type( 0x0037, "seven" ),
		UnicodeMap::value_type( 0x215e, "seveneighths" ),
		UnicodeMap::value_type( 0x2087, "seveninferior" ),
		UnicodeMap::value_type( 0xf737, "sevenoldstyle" ),
		UnicodeMap::value_type( 0x2077, "sevensuperior" ),
		UnicodeMap::value_type( 0x2592, "shade" ),
		UnicodeMap::value_type( 0x03c3, "sigma" ),
		UnicodeMap::value_type( 0x03c2, "sigma1" ),
		UnicodeMap::value_type( 0x223c, "similar" ),
		UnicodeMap::value_type( 0x0036, "six" ),
		UnicodeMap::value_type( 0x2086, "sixinferior" ),
		UnicodeMap::value_type( 0xf736, "sixoldstyle" ),
		UnicodeMap::value_type( 0x2076, "sixsuperior" ),
		UnicodeMap::value_type( 0x002f, "slash" ),
		UnicodeMap::value_type( 0x263a, "smileface" ),
		UnicodeMap::value_type( 0x0020, "space" ),
		UnicodeMap::value_type( 0x2660, "spade" ),
		UnicodeMap::value_type( 0xf6f2, "ssuperior" ),
		UnicodeMap::value_type( 0x00a3, "sterling" ),
		UnicodeMap::value_type( 0x220b, "suchthat" ),
		UnicodeMap::value_type( 0x2211, "summation" ),
		UnicodeMap::value_type( 0x263c, "sun" ),
		UnicodeMap::value_type( 0x0074, "t" ),
		UnicodeMap::value_type( 0x03c4, "tau" ),
		UnicodeMap::value_type( 0x0167, "tbar" ),
		UnicodeMap::value_type( 0x0165, "tcaron" ),
		UnicodeMap::value_type( 0x0163, "tcommaaccent" ),
		UnicodeMap::value_type( 0x2234, "therefore" ),
		UnicodeMap::value_type( 0x03b8, "theta" ),
		UnicodeMap::value_type( 0x03d1, "theta1" ),
		UnicodeMap::value_type( 0x00fe, "thorn" ),
		UnicodeMap::value_type( 0x0033, "three" ),
		UnicodeMap::value_type( 0x215c, "threeeighths" ),
		UnicodeMap::value_type( 0x2083, "threeinferior" ),
		UnicodeMap::value_type( 0xf733, "threeoldstyle" ),
		UnicodeMap::value_type( 0x00be, "threequarters" ),
		UnicodeMap::value_type( 0xf6de, "threequartersemdash" ),
		UnicodeMap::value_type( 0x00b3, "threesuperior" ),
		UnicodeMap::value_type( 0x02dc, "tilde" ),
		UnicodeMap::value_type( 0x0303, "tildecomb" ),
		UnicodeMap::value_type( 0x0384, "tonos" ),
		UnicodeMap::value_type( 0x2122, "trademark" ),
		UnicodeMap::value_type( 0x2122, "trademarksans" ),
		UnicodeMap::value_type( 0x2122, "trademarkserif" ),
		UnicodeMap::value_type( 0x25bc, "triagdn" ),
		UnicodeMap::value_type( 0x25c4, "triaglf" ),
		UnicodeMap::value_type( 0x25ba, "triagrt" ),
		UnicodeMap::value_type( 0x25b2, "triagup" ),
		UnicodeMap::value_type( 0xf6f3, "tsuperior" ),
		UnicodeMap::value_type( 0x0032, "two" ),
		UnicodeMap::value_type( 0x2025, "twodotenleader" ),
		UnicodeMap::value_type( 0x2082, "twoinferior" ),
		UnicodeMap::value_type( 0xf732, "twooldstyle" ),
		UnicodeMap::value_type( 0x00b2, "twosuperior" ),
		UnicodeMap::value_type( 0x2154, "twothirds" ),
		UnicodeMap::value_type( 0x0075, "u" ),
		UnicodeMap::value_type( 0x00fa, "uacute" ),
		UnicodeMap::value_type( 0x016d, "ubreve" ),
		UnicodeMap::value_type( 0x00fb, "ucircumflex" ),
		UnicodeMap::value_type( 0x00fc, "udieresis" ),
		UnicodeMap::value_type( 0x00f9, "ugrave" ),
		UnicodeMap::value_type( 0x01b0, "uhorn" ),
		UnicodeMap::value_type( 0x0171, "uhungarumlaut" ),
		UnicodeMap::value_type( 0x016b, "umacron" ),
		UnicodeMap::value_type( 0x005f, "underscore" ),
		UnicodeMap::value_type( 0x2017, "underscoredbl" ),
		UnicodeMap::value_type( 0x222a, "union" ),
		UnicodeMap::value_type( 0x2200, "universal" ),
		UnicodeMap::value_type( 0x0173, "uogonek" ),
		UnicodeMap::value_type( 0x2580, "upblock" ),
		UnicodeMap::value_type( 0x03c5, "upsilon" ),
		UnicodeMap::value_type( 0x03cb, "upsilondieresis" ),
		UnicodeMap::value_type( 0x03b0, "upsilondieresistonos" ),
		UnicodeMap::value_type( 0x03cd, "upsilontonos" ),
		UnicodeMap::value_type( 0x016f, "uring" ),
		UnicodeMap::value_type( 0x0169, "utilde" ),
		UnicodeMap::value_type( 0x0076, "v" ),
		UnicodeMap::value_type( 0x0077, "w" ),
		UnicodeMap::value_type( 0x1e83, "wacute" ),
		UnicodeMap::value_type( 0x0175, "wcircumflex" ),
		UnicodeMap::value_type( 0x1e85, "wdieresis" ),
		UnicodeMap::value_type( 0x2118, "weierstrass" ),
		UnicodeMap::value_type( 0x1e81, "wgrave" ),
		UnicodeMap::value_type( 0x0078, "x" ),
		UnicodeMap::value_type( 0x03be, "xi" ),
		UnicodeMap::value_type( 0x0079, "y" ),
		UnicodeMap::value_type( 0x00fd, "yacute" ),
		UnicodeMap::value_type( 0x0177, "ycircumflex" ),
		UnicodeMap::value_type( 0x00ff, "ydieresis" ),
		UnicodeMap::value_type( 0x00a5, "yen" ),
		UnicodeMap::value_type( 0x1ef3, "ygrave" ),
		UnicodeMap::value_type( 0x007a, "z" ),
		UnicodeMap::value_type( 0x017a, "zacute" ),
		UnicodeMap::value_type( 0x017e, "zcaron" ),
		UnicodeMap::value_type( 0x017c, "zdotaccent" ),
		UnicodeMap::value_type( 0x0030, "zero" ),
		UnicodeMap::value_type( 0x2080, "zeroinferior" ),
		UnicodeMap::value_type( 0xf730, "zerooldstyle" ),
		UnicodeMap::value_type( 0x2070, "zerosuperior" ),
		UnicodeMap::value_type( 0x03b6, "zeta" ),
		UnicodeMap::value_type( 0x007b, "{" ),
		UnicodeMap::value_type( 0x007c, "|" ),
		UnicodeMap::value_type( 0x007d, "}" ),
		UnicodeMap::value_type( 0x007e, "~" ),
//		UnicodeMap::value_type( 0, 0  ),
	} ;

	const UnicodeMap unimap( Begin(table), End(table) ) ;

} // end of local namespace

const char*	UnicodeToName( wchar_t ch )
{
	UnicodeMap::left_const_iterator i = unimap.left.find( ch ) ;
	return i != unimap.left.end() ? i->second : 0 ;
}

wchar_t		NameToUnicode( const char *name )
{
	UnicodeMap::right_const_iterator i = unimap.right.find( name ) ;
	return i != unimap.right.end() ? i->second : 0 ;
}


} // end of pdf namespace
