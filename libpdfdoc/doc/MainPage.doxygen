/*!	\mainpage	libpdfdoc Project Home Page
	\section	intro	Introduction
	libpdfdoc is a library to access
	<a href="http://www.adobe.com/devnet/pdf/pdf_reference.html">PDF (Portable
	Document Format)</a>. It provides classes
	and functions for reading and writing to PDF files.
	
	\section	features	Features
	- read/write PDF files with the same API
	- not much right now
	
	\section	license		License
	libpdfdoc is release under
	<a href="http://www.gnu.org/licenses/old-licenses/gpl-2.0.html">GPL v2</a>.
	In short, it is <a href="http://www.gnu.org/philosophy/free-sw.html">Free
	Software</a>. I am not responsible for any damage it may make. You can
	change it, sell it,	distribute it. As libpdfdoc contains some code borrow
	from GPL project, the license is GPL v2 as a whole. As it is NOT LGPL,
	it is not legal to use it in proprietary projects.
	
	Note that it is not "GPL v2 or later". The GPL v3 does not apply to this
	library.
	
	\section	get		Getting libpdfdoc
	libpdfdoc can be downloaded in from
	<a href="http://sourceforge.net/project/showfiles.php?group_id=14057">
	sourceforge</a>. The latest snapshot is also available in the
	<a href="http://libpdfxx.git.sourceforge.net/">git</a> repository hosted
	in sourceforge. To access the repository, configure you git clients to
	clone from git://libpdfxx.git.sourceforge.net/gitroot/libpdfxx. See
	<a href="http://sourceforge.net/projects/libpdfxx/develop">here</a> for more
	details.
	
	\section	depend	Dependencies
	libpdfdoc depends on the following libraries:
	- <a href="http://www.boost.org">The Boost Library</a> v1.37 or above
	- <a href="http://zlib.net">Zlib</a> v1.2.3
	- <a href="http://www.freetype.org">Freetype</a>
	- <a href="http://libpng.sourceforge.net/index.html">libpng</a> (Optional)
	- <a href="http://www.ijg.org/">libjpeg</a> (Optional)
	- <a href= 
	"http://apps.sourceforge.net/mediawiki/cppunit/index.php?title=Main_Page">
	cppunit</a> (Optional)
	
	These are available for all major Linux distributions. For Win32 platforms,
	most of the libraries (zlib, Freetype, libpng) can be downloaded from the
	<a href="http://gnuwin32.sourceforge.net/">GNU Win32 project</a>. For Boost,
	<a href="http://www.boostpro.com/download">BoostPro Computing</a> provides
	pre-built libraries with a nice installer for Win32.

	\section download Download
	
	libpdfdoc is available at <a href="https://sourceforge.net/projects/libpdfxx/files/">
	sourceforge</a>.
	
	\section	build	Building libpdfdoc
	libpdfdoc uses the <a href="http://www.cmake.org/">cmake</a> build system
	to produce makefiles for different development platforms. The cmake build
	system will automatically detect the location of the dependency libraries
	and adjust the include and library path of the project. In most unix-like
	environment, the command:

\verbatim
cmake -G 'Unix Makefiles' /path/to/libpdfdoc/
\endverbatim

	should be enough to generate the makefiles to build the project.
	It is also possible to use cmake to generate project files of other build
	environments, e.g. MS Visual Studio or eclipse, depending on your platform.
	Afterwards, just type \c make to build. cmake by default will not show the
	actual command line of the compiler. To see it, type this command:

\verbatim
VERBOSE=1 make
\endverbatim

	This will show the full command line of the compiler. It is useful for
	troubleshooting compiler issues.

	cmake also supports Microsoft Visual Studio. Just use a different makefile
	generator for the version of VS. For example, for VS 2005:
	
\verbatim
cmake -G 'Visual Studio 8 2005' c:\path\to\libpdfdoc\
\endverbatim

	You may have to add <tt>-DCMAKE_PREFIX_PATH=c:\\path\\to\\libraries</tt>
	to the cmake command line to make sure it can find the library
	dependencies. You can also use
	<tt>-DBOOST_ROOT=c:\\path\\to\\boost\\library</tt> to specify
	the path to the boost library.

	cmake recommends separating the source code directory and the build
	directory. Suppose the libpdfdoc source code is located at
	<tt>c:\\code\\libpdfdoc</tt>, and you want to create the VS project files
	at <tt>c:\\build\\libpdfdoc</tt>, you may want to run the following
	commands:
	
\verbatim
C:\build\libpdfdoc>cmake -G "Visual Studio 8 2005" \
                         -DBOOST_ROOT=c:\path\to\boost\library \
                         -DCMAKE_PREFIX_PATH=c:\path\to\other\libraries \
                         -DCPPUNIT_PREFIX=c:\path\to\cppunit \
                         c:\code\libpdfdoc
\endverbatim

	\section links Links
	- <a href="https://sourceforge.net/apps/mediawiki/libpdfxx/index.php?title=Main_Page">
	Project Wiki</a>
	- <a href="http://www.cmake.org/cmake/help/documentation.html">cmake
	documentation</a>

	See the \ref getting_start page for a simple tutorial for using the
	library.
	
	\page	getting_start	Getting Started
	
	This section will describe how to write a simplest "Hello world" program
	with libpdfdoc.

	Let's start with the following code:

\code
pdf::Doc *doc = pdf::CreateDoc( ) ;
pdf::Page *p = doc->AppendPage( ) ;
pdf::Font *f = doc->CreateSimpleFont( "Arial" ) ;

pdf::PageContent *c = p->GetContent( ) ;
pdf::Text *t = c->AddText( 12.0, f ) ;
t->AddLine( 100, 100, L"Hello world!" ) ;

doc->Write( "helloworld.pdf" ) ;
delete doc ;
\endcode

	The first line creates a PDF document. The CreateDoc() function will
	create a Doc object, which represents a PDF document. The Doc object
	provides functions to access the document content. It has member functions
	to get the individual pages of the document.
	
	The second line call pdf::Doc::AppendPage() to insert a new page at the end
	of the document.
*/
